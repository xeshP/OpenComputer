math.randomseed(os.time()) -- so that the results are always different
function FYShuffle( tInput )
    local tReturn = {}
    for i = #tInput, 1, -1 do
        local j = math.random(i)
        tInput[i], tInput[j] = tInput[j], tInput[i]
        table.insert(tReturn, tInput[i])
    end
    return tReturn
end
	
	
component = require("component")
inv = component.inventory_controller
event = require("event")
robot = require("robot")
local modem = component.modem
modem.open(5)
          --red,   aqua,    orange,  greenlime, white,  yellow
colors = {"0xFF0000","0x00D8FF","0xca7b00","0x00FF00","0xffffff","0xd1ff00"}
while true do
    local e, _, _, _, _, command = event.pull()
    if e == "modem_message" then
        if command == "sinfo" then
            stable = {}
            for slot = 1, 16 do
                ino = inv.getStackInInternalSlot(slot)
                if type(ino) == "table" then
                    inf = "["..slot.."] "..ino.name.." ["..ino.size.."]"
                    print(inf)
                    table.insert(stable, inf)
                    end
                end
            msg = require("serialization").serialize(stable)
            modem.broadcast(6, msg)
        else if command == "exinfo" then
            stable = {}
            if inv.getInventorySize(3) then
                for slot = 1, inv.getInventorySize(3) do
                    ino = inv.getStackInSlot(3, slot)
                    if type(ino) == "table" then
                        inf = "["..slot.."] "..ino.name.." ["..ino.size.."]"
                        print(inf)
                        table.insert(stable, inf)
                    end
                end
            else
                stable = {"Nothin found in externalInv"}
            end
            msg = require("serialization").serialize(stable)
            modem.broadcast(6, msg)
        else if command == "radar!" then
            radar=component.radar
            playertable = {}
            print("getRadarfunc")
            pr = radar.getPlayers()
            for k, v in pairs(pr[1]) do
                print(k.." : "..v)
                table.insert(playertable, k.." : "..v)
                end
            msgp = require("serialization").serialize(playertable)
            modem.broadcast(6, msgp)

            else
                print(command)
                pcall(load(command))
                modem.broadcast(6, "Command Executed!!1")
                end
            end
        end
    end
    

            
        

    colpast = colors[1]
	while colpast == colors[1] do
	    
		FYShuffle(colors)
		end
    robot.setLightColor(tonumber(colors[1]))
    end
