component = require("component")
serialize = require("serialization")
dbcount = 0
--hashtable = {}  ---tab["label"] = "hash"t

readnserial = function(filename)
    filer=io.open(filename,"r")
    cont=filer:read("*all")
    filer:close()
    return serialize.unserialize(cont)
end

dbtable = readnserial("dblist.txt")
hashtable = readnserial("dbhash.txt")
if hashtable == nil then hashtable = {} end

storeto = function(label, db)
    if #hashtable <= 91 then
        num = #hashtable+1
    else
        if (#hashtable/91) > 1 then
            zwischennum = (math.floor(#hashtable/91)) ---- 2 3 4 5 oder mehr
            num = #hashtable-(zwischenum*91)+1
        end
end
    print(num)
    local hashtosave = {}
    ME.store({label = label}, tostring(db), num)
    hashtosave[label] = component.proxy(tostring(db)).computeHash(num)
    save(label, hashtosave, "dbhash.txt")
end


save = function(label, hashslot, filename)
    local data = readnserial("dbhash.txt")
    data[label] = hashslot
    local f=io.open(filename,"a")
    f:write(serialize.serialize(table))
    f:close()
end

cleardb = function(address)
    for r = 1,81 do
        component.proxy(address).clear(r)
    end
end




ME = component.me_interface
--items = ME.getItemsInNetwork()

storeto("Dirt", dbtable.database1)
storeto("Diamond", dbtable.database1)
storeto("Sand", dbtable.database1)
storeto("Dirt", dbtable.database1)






