component = require("component")
thread = require("thread")
modem = component.modem
local event = require("event")
interface = component.me_interface
db = component.database
modem.open(10)
 
 

t2 = thread.create(function()
    while true do
    os.sleep(1)
    transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
    disk = transposerpay.getStackInSlot(1, 1)
    if disk == nil then
        -----
    else
        component.modem.broadcast(3, disk.name)  
    end
    end
    
    
end)





function mysplit (inputstr, sep)
        if sep == nil then
                sep = "%s"
        end
        local t={}
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                table.insert(t, str)
        end
        return t
end





getmoney = function(currenc)-----------for countmoney atm
    fullstack = transposerpay.getAllStacks(1)
    fullstack = fullstack.getAll()
    maxchesto = #fullstack
    summe = 0
    nu = 1
    nu2 = 1
    for sloto = 1,maxchesto do
        itmn = fullstack[sloto]
        if itmn.name == "minecraft:air" then
            -----
        else
            itemtemp = itmn.size
            if itmn.name == currenc then
                transact = false
                while transact == false do
                    if transposerpay.transferItem(1,3, itmn.size, sloto, nu) == 0 then
                        nu = nu+1
                        if transposerpay.getInventorySize(3)+1 == nu then
                            nu = 1
                        end
                    else
                        if transposerpay.getSlotStackSize(1,sloto) > 1 then
                            --- kein transac
                        else
                            transact = true
                            nu = nu+1
                            if transposerpay.getInventorySize(3)+1 == nu then
                                nu = 1
                            end
                            summe = summe+itemtemp
                        end
                        
                        
                    end
                    
                end

            else
                
                transact2 = false
                while transact2 == false do
                    if transposerpay.transferItem(1,4, itmn.size, sloto, nu2) == 0 then
                        nu2 = nu2+1
                    else
                        transact2 = true
                        nu2 = nu2+1
                    end
                    
                end
                
                
                
            end
            
        end
    end
    return summe
    
end



-----export bus!!!
exp1 = component.proxy("8c24b824-1b82-429c-9940-06569f62c0de") ---- links 1x
exp2 = component.proxy("ee9cb236-5a48-4b74-ae53-155f94f77b28")  ----oben  8x
exp3 = component.proxy("c83ac276-a829-48f7-bcf5-f2c9db059a89") ---- rechts 32x
exp4 = component.proxy("2e984c90-4de7-4219-853c-4a798b55ec3b") ---- vorne 64x
------------

moneydropper = function(auszahl, currenci)------for moneydrop on atm
done = false
print("MONEYDROP AUSZAHL : "..auszahl.."   "..currenci)

amount1 = 0
amount2 = 0
amount3 = 0
amount4 = 0

while auszahl ~= 0 do
    if auszahl >= 64 then
        amount4 = math.floor(auszahl/64)
        auszahl = auszahl-amount4*64
        else if auszahl >= 32 then
            amount3 = math.floor(auszahl/32)
            auszahl = auszahl-amount3*32
            else if auszahl >= 8 then
                amount2 = math.floor(auszahl/8)
                auszahl = auszahl-amount2*8
                else if auszahl <= 7 then
                    amount1 = auszahl
                    auszahl = 0
                    end
                end
                
            end
        
    end
    os.sleep(0.1)
        
end

print("1x"..amount1.."| 8x"..amount2.."| 32x"..amount3.."| 64x"..amount4)

items = interface.getItemsInNetwork()
for slot,item in pairs(items) do
    if slot ~= "n" then
        
        if item.name == currenci then
            for dbslot = 1,20 do
                dbdata = db.get(dbslot)
                if dbdata.name == currenci then
                    print(dbslot)
                    
                    if amount1 ~= 0 then
                        tr1 = thread.create(function()
                        
                            exp1.setExportConfiguration(2,1,db.address, dbslot)
                            track1 = 0
                            for runs = 1,amount1 do
                                exp1.exportIntoSlot(2,1)
                            end
                            print("threat 1 ending!!!1")------links slow 1x
     
                        end)
                    end
                    
                    
                    if amount2 ~= 0 then
                        tr2 = thread.create(function()
                            exp2.setExportConfiguration(0,1,db.address, dbslot)  ------ oben norm 8x
                            for runs = 1,amount2 do
                                exp2.exportIntoSlot(0,1)
                            end
                            print("threat 2 ending!!!1")
                        end)
                    end
                    
                    
                    
                    if amount4 ~= 0 then
                        tr3 = thread.create(function()
                            exp4.setExportConfiguration(4,1,db.address, dbslot)--------  vorne  powerslot 64x
                            for runs = 1,amount4 do
                                exp4.exportIntoSlot(4,1)
                            end
                            print("threat 4 ending!!!1")
                        end)
                    end
            

                    if amount3 ~= 0 then
                        tr4 = thread.create(function()
                            exp3.setExportConfiguration(3,1,db.address, dbslot)-------  rechts  fast 32x
                            for runs = 1,amount3 do
                                exp3.exportIntoSlot(3,1)
                            end
                            print("threat 3 ending!!!1")
                        end)
                    end
                
                    
                    thread.waitForAny({tr1, tr2, tr3, tr4})
                    done = true
                    break
                end
                
                
            end
            
        end
        
        
        if done == true then
            break
        end
        
    end
    
end

end
 
 

 
while true do
    message = ""
    local _, _, from, port, _, message = event.pull("modem_message")
    print(message.."     FROM  "..from)
    if message == "quitbl" then
        print("Now quiting")
        transposerblack = component.proxy("b9cd1935-091d-445e-bcff-e5d225b4b6e2")
        transposerblack.transferItem(2, 1, 1, 1, 1)
        os.sleep(0.3)
        else if message == "quitbl2" then
            print("Now quiting 2")
            transposerblack2 = component.proxy("31fccb42-9bc7-4bac-bce1-02e85656e38b")
            transposerblack2.transferItem(2, 1, 1, 1, 1)
            os.sleep(0.3)
        else if message == "cardgen" then
            print("cardgen!")
            transposerdisk = component.proxy("81b75491-18ed-4684-b711-785d81f0ffdf")
            
            floppyfalse = false
            maxfl = transposerdisk.getInventorySize(1)
            for slsl = 1, maxfl do
                stck = transposerdisk.getStackInSlot(1, slsl)
                if stck then
                    transposerdisk.transferItem(1,2,1,slsl,1)
                    break
                end
            end
            
            os.sleep(2.7)
            transposerdisk.transferItem(2, 4, 1, 1, 1)
            else if string.find(message, "ßß") then
                print("ATM PAYOUT!")
                transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
                if tonumber(mysplit(message, "ßß")[1]) ~= 0 then
                    moneydropper(tonumber(mysplit(message, "ßß")[1]), mysplit(message, "ßß")[3])
                end
    
                if tonumber(mysplit(message, "ßß")[2]) == 0 then
                    ----
                else
                    if mysplit(message, "ßß")[3] == "minecraft:diamond_block" then
                        ingot = "minecraft:diamond"
                        else if mysplit(message, "ßß")[3] == "minecraft:gold_block" then
                            ingot = "minecraft:gold_ingot"
                            else if mysplit(message, "ßß")[3] == "minecraft:emerald_block" then
                                ingot = "minecraft:emerald"
                                else if mysplit(message, "ßß")[3] == "minecraft:iron_block" then
                                    ingot = "minecraft:iron_ingot"
                                    else if mysplit(message, "ßß")[3] == "draconicevolution:draconic_block" then
                                        ingot = "draconicevolution:draconic_ingot"
                                        else if mysplit(message, "ßß")[3] == "draconicevolution:draconium_block" then
                                            ingot = "draconicevolution:draconium_ingot"
                                            else if mysplit(message, "ßß")[3] == "overloaded:nether_star_block" then
                                                ingot = "minecraft:nether_star"
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        
                    print("outputting rest "..tonumber(mysplit(message, "ßß")[2]).."    "..ingot)
                    moneydropper(tonumber(mysplit(message, "ßß")[2]), ingot)
                end
                else if string.find(message, "ßITEM") then
                    print("ATM COUNT!")
                    transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
                    it = mysplit(message, "ßITEM")[1]
                    sut = getmoney(it)
                    print("Blöcke "..sut.." = "..(sut*9).."Credit")
                    sut = tostring(sut*9)
                    component.modem.broadcast(111, sut)
                    else if message == "atmchestinfo" then
                        print("ATMCHESTdiskinfo")
                        transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
                        disk = transposerpay.getStackInSlot(1, 1)
                        if disk == nil then
                            component.modem.broadcast(3, "nil")
                        else
                            component.modem.broadcast(3, disk.name)  
                        end
                    else if message == "dropindisk" then
                        print("ATM dropindsik")
                        transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
                        transposerpay.transferItem(1,5,1,1,1)
                        else if message == "dropoutdisk" then
                            transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
                            transposerpay.transferItem(5,4,1,1,1)
                            else if message == "falseitem" then
                                transposerpay = component.proxy("8fb3c950-7f79-4ae5-818d-ea5734fe8ebc")
                                for slk = 1,8 do
                                    if transposerpay.getStackInSlot(1,slk) == nil then
                                        ----
                                    else
                                        maxsl = transposerpay.getSlotStackSize(1,slk)
                                        transposerpay.transferItem(1,4,maxsl,slk,slk)
                                    end
                                end
 
                                end
                            end
                        
                        end
                        



                        end
                        
                    
                    
                    end
                
                end
            end
            
    end
    end
    os.sleep(0.2)
end


thread.waitForAny({t2})
